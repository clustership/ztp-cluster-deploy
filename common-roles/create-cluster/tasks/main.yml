---
- name: Handle release mirror 
  block:
  - name: Get local registry certificate (will fail if the file is not there)
    set_fact:
      registry_mirror_certificate: "{{ lookup('file', registry_mirror_cert, rstrip=False) }}"
  - name: Get image content sources
    set_fact:
      image_content_sources: "{{ lookup('file', image_content_sources, rstrip=False) | from_yaml | to_json }}"
  when: registry_mirror_cert is defined

- name: populate the install config patch
  set_fact:
    instal_cfg_patch: "{{ lookup('template', 'install-config.json.j2') |to_json }}"

- name: Create a temporary file
  tempfile:
    state: file
  register: tempfile_pullsecret

- name: Copy pull secret to file
  copy:
    content: "{{ pull_secret }}"
    dest: "{{ tempfile_pullsecret.path }}"

- name: Create cluster
  block:
    - name: Create new AI cluster
      shell: "aicli create cluster -P pull_secret={{ tempfile_pullsecret.path }} -P base_dns_domain={{ cluster_domain }} -P ssh_public_key='{{ ssh_public_key }}' -P openshift_version='{{ cluster_version }}' {{ extra_args }} {{ cluster_name_var }}"
      retries: 30
      delay: 5
      register: result
      until: result.rc == 0

    - name: Retrieve cluster ID from name
      shell: "aicli list cluster | grep {{ cluster_name_var }} | cut -d '|' -f3 | tr -d ' '"
      register: cluster_id

    - name: Patch the install-config
      uri:
        url: "{{ ai_url }}/api/assisted-install/v1/clusters/{{ cluster_id.stdout }}/install-config"
        method: PATCH
        headers:
          Content-Type: application/json
          accept: application/json
        body: "{{ instal_cfg_patch }}"
        body_format: json
        status_code: 201
  environment:
    AI_URL: "{{ ai_url }}"
