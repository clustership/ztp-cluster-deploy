- name: Create temporary directory
  tempfile:
    state: directory
  register: temporary_directory

- name: Copy local kubeconfig to remote server if set
  ansible.builtin.copy:
    src: "{{ provisioner_cluster_kubeconfig }}"
    dest: "{{ temporary_directory.path }}/kubeconfig"

- block:
  - name: Retrieve the private registry crt
    ansible.builtin.shell:
      cmd: |
        {% set mirror_without = provisioner_cluster_registry.split(':') %}oc get cm/image-registry-certificates -n openshift-image-registry -o json | jq .data.\"{{ mirror_without[0] }}..{{ mirror_without[1] }}\" | sed -e 's/"//g' | sed -e 's/\\n/\n/g' | tr -s '\n'
    register: cert_result

  - name: Set fact for private registry, if we need it
    set_fact:
      private_registry_crt: "{{ cert_result.stdout }}"
  when: (private_registry_crt is not defined or private_registry_crt|length <=0) and provisioner_cluster_registry is defined

- block:
  - name: Retrieve the registries.conf from one of the masters
    ansible.builtin.shell:
      cmd: oc get nodes  -o jsonpath='{ $.items[0].status.addresses[?(@.type=="InternalIP")].address }'
    register: master_ip

  - name: Retrieve the registries.conf file from it
    ansible.builtin.shell:
      cmd: "ssh core@{{ master_ip.stdout }} 'sudo cat /etc/containers/registries.conf'"
    ignore_errors: true
    when: master_ip.stdout|length > 0
    register: registries_output

  - name: Set fact
    set_fact:
      registries_conf: "{{ registries_output.stdout|default('') }}"
    when: registries_output.stdout|length > 0 

  when: (registries_conf is not defined or registries_conf|length <=0) and provisioner_cluster_registry is defined

- name: Create registry configmap just if needed
  template:
    src: "templates/add-configmap-registry.yaml.j2"
    dest: "{{ temporary_directory.path }}/add-configmap-registry.yaml"
  when: private_registry_crt is defined
    
- name: Copy template to temporary path
  template:
    src: "templates/{{ item }}"
    dest: "{{ temporary_directory.path }}/{{ item | replace('.j2', '') }}"
  with_items:
    - add-local-storage-operator.yaml.j2
    - local-volume.yaml.j2
    - add-hive-operator.yaml.j2
    - add-hive-config.yaml.j2
    - add-assisted-service-operator.yaml.j2
    - add-cluster-imageset.yaml.j2

- name: Query for existing storage class
  ansible.builtin.shell:
    cmd: oc get sc -o name | wc -l
    chdir: "{{ temporary_directory.path }}"
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"
  register: sclass

- block:
  - name: Create local storage operator
    ansible.builtin.shell:
      cmd: oc apply -f ./add-local-storage-operator.yaml
      chdir: "{{ temporary_directory.path }}"
    environment:
      KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"

  - name: Apply local volume, need to iterate until succeeds
    ansible.builtin.shell:
      cmd: oc apply -f ./local-volume.yaml
      chdir: "{{ temporary_directory.path }}"
    register: result
    environment:
      KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"
    until: result.rc == 0
    retries: 100
    delay: 30

  - name: wait until provisioner pods are created
    ansible.builtin.shell:
      cmd: oc get pods -n openshift-local-storage | grep provisioner | wc -l
    register: provisioner_pods
    environment:
      KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"
    until: provisioner_pods.stdout|int == 3
    retries: 100
    delay: 30

  - name: annotate as default class
    ansible.builtin.shell:
      cmd: "{{ lookup('template', 'patch_local_storage.j2') }}"
    environment:
      KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"
  when: sclass.stdout|int == 0

- name: Create hive operator
  ansible.builtin.shell:
    cmd: oc apply -f ./add-hive-operator.yaml
    chdir: "{{ temporary_directory.path }}"
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"

- name: wait until hive pods are created
  ansible.builtin.shell:
    cmd: oc get pods -n openshift-operators | grep hive | wc -l
  register: hive_pods
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"
  until: hive_pods.stdout|int == 1
  retries: 100
  delay: 30

- name: Create hive configuration
  ansible.builtin.shell:
    cmd: oc apply -f ./add-hive-config.yaml
    chdir: "{{ temporary_directory.path }}"
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"

- name: Create assisted service operator
  ansible.builtin.shell:
    cmd: oc apply -f ./add-assisted-service-operator.yaml
    chdir: "{{ temporary_directory.path }}"
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"

- name: Create configmap for crt
  ansible.builtin.shell:
    cmd: oc apply -f ./add-configmap-registry.yaml
    chdir: "{{ temporary_directory.path }}"
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"
  when: private_registry_crt is defined

- name: wait until ai pods are created
  ansible.builtin.shell:
    cmd: oc get pods -n assisted-installer | grep assisted-service-operator | wc -l
  register: ai_pods
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"
  until: ai_pods.stdout|int == 1
  retries: 100
  delay: 30

- name: wait until assisited-service deployment is created
  ansible.builtin.shell:
    cmd: oc get deployment/assisted-service -n assisted-installer | grep assisted-service | wc -l
  register: ai_deployment
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"
  until: ai_deployment.stdout|int == 1
  retries: 100
  delay: 30

- name: Downscale the bm operator
  ansible.builtin.shell:
    cmd: "oc scale --replicas=0 deployment.apps/cluster-baremetal-operator -n openshift-machine-api"
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"

- name: Patch the provisioning to monitor all namespaces
  ansible.builtin.shell:
    cmd: |
      oc patch provisioning provisioning-configuration --type merge -p '{"spec":{"watchAllNamespaces": true}}'
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"

- name: Add cluster imageset
  ansible.builtin.shell:
    cmd: oc apply -f ./add-cluster-imageset.yaml
    chdir: "{{ temporary_directory.path }}"
  environment:
    KUBECONFIG: "{{ temporary_directory.path }}/kubeconfig"
